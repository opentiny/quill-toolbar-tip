{"version":3,"file":"dev.js","sources":["../src/constants/tip-text.ts","../src/constants/tooltip-config.ts","../node_modules/.pnpm/@floating-ui+utils@0.2.8/node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs","../node_modules/.pnpm/@floating-ui+core@1.6.8/node_modules/@floating-ui/core/dist/floating-ui.core.mjs","../node_modules/.pnpm/@floating-ui+utils@0.2.8/node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs","../node_modules/.pnpm/@floating-ui+dom@1.6.12/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs","../src/utils/types.ts","../src/utils/components.ts","../src/utils/handler-utils.ts","../src/index.ts"],"sourcesContent":[null,null,"/**\n * Custom positioning reference element.\n * @see https://floating-ui.com/docs/virtual-elements\n */\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst alignments = ['start', 'end'];\nconst placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = v => ({\n  x: v,\n  y: v\n});\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\nfunction getAxisLength(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nfunction getSideAxis(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  const {\n    x,\n    y,\n    width,\n    height\n  } = rect;\n  return {\n    width,\n    height,\n    top: y,\n    left: x,\n    right: x + width,\n    bottom: y + height,\n    x,\n    y\n  };\n}\n\nexport { alignments, clamp, createCoords, evaluate, expandPaddingObject, floor, getAlignment, getAlignmentAxis, getAlignmentSides, getAxisLength, getExpandedPlacements, getOppositeAlignmentPlacement, getOppositeAxis, getOppositeAxisPlacements, getOppositePlacement, getPaddingObject, getSide, getSideAxis, max, min, placements, rectToClientRect, round, sides };\n","import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    x,\n    y,\n    width: rects.floating.width,\n    height: rects.floating.height\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const initialSideAxis = getSideAxis(initialPlacement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== 'none';\n      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$filter2;\n                const placement = (_overflowsData$filter2 = overflowsData.filter(d => {\n                  if (hasFallbackAxisSideDirection) {\n                    const currentSideAxis = getSideAxis(d.placement);\n                    return currentSideAxis === initialSideAxis ||\n                    // Create a bias to the `y` side axis due to horizontal\n                    // reading directions favoring greater width.\n                    currentSideAxis === 'y';\n                  }\n                  return true;\n                }).map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: rawValue.mainAxis || 0,\n    crossAxis: rawValue.crossAxis || 0,\n    alignmentAxis: rawValue.alignmentAxis\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n\n      // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y,\n          enabled: {\n            [mainAxis]: checkMainAxis,\n            [crossAxis]: checkCrossAxis\n          }\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      var _state$middlewareData, _state$middlewareData2;\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const maximumClippingHeight = height - overflow.top - overflow.bottom;\n      const maximumClippingWidth = width - overflow.left - overflow.right;\n      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);\n      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {\n        availableWidth = maximumClippingWidth;\n      }\n      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {\n        availableHeight = maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n","function hasWindow() {\n  return typeof window !== 'undefined';\n}\nfunction getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  if (!hasWindow() || typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);\n}\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].includes(getNodeName(element));\n}\nfunction isTopLayer(element) {\n  return [':popover-open', ':modal'].some(selector => {\n    try {\n      return element.matches(selector);\n    } catch (e) {\n      return false;\n    }\n  });\n}\nfunction isContainingBlock(elementOrCss) {\n  const webkit = isWebKit();\n  const css = isElement(elementOrCss) ? getComputedStyle(elementOrCss) : elementOrCss;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  return css.transform !== 'none' || css.perspective !== 'none' || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else if (isTopLayer(currentNode)) {\n      return null;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nfunction isLastTraversableNode(node) {\n  return ['html', 'body', '#document'].includes(getNodeName(node));\n}\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.scrollX,\n    scrollTop: element.scrollY\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  if (traverseIframes === void 0) {\n    traverseIframes = true;\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    const frameElement = getFrameElement(win);\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\nfunction getFrameElement(win) {\n  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;\n}\n\nexport { getComputedStyle, getContainingBlock, getDocumentElement, getFrameElement, getNearestOverflowAncestor, getNodeName, getNodeScroll, getOverflowAncestors, getParentNode, getWindow, isContainingBlock, isElement, isHTMLElement, isLastTraversableNode, isNode, isOverflowElement, isShadowRoot, isTableElement, isTopLayer, isWebKit };\n","import { rectToClientRect, detectOverflow as detectOverflow$1, offset as offset$1, autoPlacement as autoPlacement$1, shift as shift$1, flip as flip$1, size as size$1, hide as hide$1, arrow as arrow$1, inline as inline$1, limitShift as limitShift$1, computePosition as computePosition$1 } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle, isHTMLElement, isElement, getWindow, isWebKit, getFrameElement, getNodeScroll, getDocumentElement, isTopLayer, getNodeName, isOverflowElement, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentWin = win;\n    let currentIFrame = getFrameElement(currentWin);\n    while (currentIFrame && offsetParent && offsetWin !== currentWin) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentWin = getWindow(currentIFrame);\n      currentIFrame = getFrameElement(currentWin);\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\n// If <html> has a CSS width greater than the viewport, then this will be\n// incorrect for RTL.\nfunction getWindowScrollBarX(element, rect) {\n  const leftScroll = getNodeScroll(element).scrollLeft;\n  if (!rect) {\n    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;\n  }\n  return rect.left + leftScroll;\n}\n\nfunction getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {\n  if (ignoreScrollbarX === void 0) {\n    ignoreScrollbarX = false;\n  }\n  const htmlRect = documentElement.getBoundingClientRect();\n  const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 :\n  // RTL <body> scrollbar.\n  getWindowScrollBarX(documentElement, htmlRect));\n  const y = htmlRect.top + scroll.scrollTop;\n  return {\n    x,\n    y\n  };\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isFixed = strategy === 'fixed';\n  const documentElement = getDocumentElement(offsetParent);\n  const topLayer = elements ? isTopLayer(elements.floating) : false;\n  if (offsetParent === documentElement || topLayer && isFixed) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y,\n      width: clippingAncestor.width,\n      height: clippingAncestor.height\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  const {\n    width,\n    height\n  } = getCssDimensions(element);\n  return {\n    width,\n    height\n  };\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      // If the <body> scrollbar appears on the left (e.g. RTL systems). Use\n      // Firefox with layout.scrollbar.side = 3 in about:config to test this.\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);\n  const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;\n  const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;\n  return {\n    x,\n    y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction isStaticPositioned(element) {\n  return getComputedStyle(element).position === 'static';\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  let rawOffsetParent = element.offsetParent;\n\n  // Firefox returns the <html> element as the offsetParent if it's non-static,\n  // while Chrome and Safari return the <body> element. The <body> element must\n  // be used to perform the correct calculations even if the <html> element is\n  // non-static.\n  if (getDocumentElement(element) === rawOffsetParent) {\n    rawOffsetParent = rawOffsetParent.ownerDocument.body;\n  }\n  return rawOffsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const win = getWindow(element);\n  if (isTopLayer(element)) {\n    return win;\n  }\n  if (!isHTMLElement(element)) {\n    let svgOffsetParent = getParentNode(element);\n    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {\n      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {\n        return svgOffsetParent;\n      }\n      svgOffsetParent = getParentNode(svgOffsetParent);\n    }\n    return win;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {\n    return win;\n  }\n  return offsetParent || getContainingBlock(element) || win;\n}\n\nconst getElementRects = async function (data) {\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  const floatingDimensions = await getDimensionsFn(data.floating);\n  return {\n    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      width: floatingDimensions.width,\n      height: floatingDimensions.height\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    var _io;\n    clearTimeout(timeoutId);\n    (_io = io) == null || _io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = element.getBoundingClientRect();\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          // If the reference is clipped, the ratio is 0. Throttle the refresh\n          // to prevent an infinite loop of updates.\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 1000);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          var _resizeObserver;\n          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    var _resizeObserver2;\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo == null || cleanupIo();\n    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nconst detectOverflow = detectOverflow$1;\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = offset$1;\n\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = autoPlacement$1;\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = shift$1;\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = flip$1;\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = size$1;\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = hide$1;\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = arrow$1;\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = inline$1;\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = limitShift$1;\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { arrow, autoPlacement, autoUpdate, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, platform, shift, size };\n",null,null,null,null],"names":["defaultToolbarTip","reduce","map","name","toUpperCase","slice","text","onShow","_","value","size","font","direction","target","classList","contains","tooltipDefaultOptions","msg","delay","className","min","Math","max","round","floor","createCoords","v","x","y","oppositeSideMap","left","right","bottom","top","oppositeAlignmentMap","start","end","clamp","evaluate","param","getSide","placement","split","getAlignment","getOppositeAxis","axis","getAxisLength","getSideAxis","includes","getAlignmentAxis","getOppositeAlignmentPlacement","replace","alignment","getOppositePlacement","side","rectToClientRect","rect","width","height","computeCoordsFromPlacement","_ref","rtl","reference","floating","sideAxis","alignmentAxis","alignLength","isVertical","commonX","commonY","commonAlign","coords","async","detectOverflow","state","options","_await$platform$isEle","platform","rects","elements","strategy","boundary","rootBoundary","elementContext","altBoundary","padding","paddingObject","expandPaddingObject","getPaddingObject","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","hasWindow","window","getNodeName","node","isNode","nodeName","toLowerCase","getWindow","_node$ownerDocument","ownerDocument","defaultView","document","documentElement","Node","Element","isHTMLElement","HTMLElement","isShadowRoot","ShadowRoot","isOverflowElement","overflow","overflowX","overflowY","display","getComputedStyle","test","isTableElement","isTopLayer","some","selector","matches","e","isContainingBlock","elementOrCss","webkit","isWebKit","css","transform","perspective","containerType","backdropFilter","filter","willChange","contain","CSS","supports","isLastTraversableNode","getNodeScroll","scrollLeft","scrollTop","scrollX","scrollY","getParentNode","result","assignedSlot","parentNode","host","getNearestOverflowAncestor","body","getOverflowAncestors","list","traverseIframes","_node$ownerDocument2","scrollableAncestor","isBody","win","frameElement","getFrameElement","concat","visualViewport","parent","Object","getPrototypeOf","getCssDimensions","parseFloat","hasOffset","offsetWidth","offsetHeight","shouldFallback","$","unwrapElement","domElement","getBoundingClientRect","Number","isFinite","noOffsets","getVisualOffsets","offsetLeft","offsetTop","includeScale","isFixedStrategy","clientRect","scale","visualOffsets","isFixed","floatingOffsetParent","shouldAddVisualOffsets","offsetWin","currentWin","currentIFrame","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","getWindowScrollBarX","leftScroll","getHTMLOffset","scroll","ignoreScrollbarX","htmlRect","getClientRectFromClippingAncestor","clippingAncestor","html","clientWidth","clientHeight","visualViewportBased","getViewportRect","scrollWidth","scrollHeight","getDocumentRect","getInnerBoundingClientRect","hasFixedPositionAncestor","stopNode","position","getRectRelativeToOffsetParent","isOffsetParentAnElement","offsets","offsetRect","htmlOffset","isStaticPositioned","getTrueOffsetParent","polyfill","rawOffsetParent","svgOffsetParent","currentNode","getContainingBlock","topLayer","clippingAncestors","cache","cachedResult","get","el","currentContainingBlockComputedStyle","elementIsFixed","computedStyle","currentNodeIsContaining","ancestor","set","getClippingElementAncestors","this","_c","firstClippingAncestor","clippingRect","accRect","getElementRects","data","getOffsetParentFn","getDimensionsFn","getDimensions","floatingDimensions","getClientRects","Array","from","isRTL","autoUpdate","update","ancestorScroll","ancestorResize","elementResize","ResizeObserver","layoutShift","IntersectionObserver","animationFrame","referenceEl","ancestors","forEach","addEventListener","passive","cleanupIo","onMove","timeoutId","io","root","cleanup","_io","clearTimeout","disconnect","refresh","skip","threshold","rootMargin","isFirstUpdate","handleObserve","entries","ratio","intersectionRatio","setTimeout","observe","observeMove","frameId","reobserveFrame","resizeObserver","firstEntry","unobserve","cancelAnimationFrame","requestAnimationFrame","_resizeObserver","prevRefRect","frameLoop","nextRefRect","_resizeObserver2","removeEventListener","offset","fn","_middlewareData$offse","_middlewareData$arrow","middlewareData","diffCoords","mainAxisMulti","crossAxisMulti","rawValue","mainAxis","crossAxis","convertValueToCoords","arrow","alignmentOffset","shift","checkMainAxis","checkCrossAxis","limiter","detectOverflowOptions","mainAxisCoord","crossAxisCoord","maxSide","limitedCoords","enabled","flip","_middlewareData$flip","initialPlacement","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","flipAlignment","initialSideAxis","isBasePlacement","oppositePlacement","getExpandedPlacements","hasFallbackAxisSideDirection","push","isStart","lr","rl","tb","bt","getSideList","getOppositeAxisPlacements","placements","overflows","overflowsData","sides","length","mainAlignmentSide","getAlignmentSides","every","_middlewareData$flip2","_overflowsData$filter","nextIndex","index","nextPlacement","reset","resetPlacement","d","sort","a","b","_overflowsData$filter2","currentSideAxis","acc","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse2","isOriginSide","computePosition","Map","mergedOptions","platformWithCache","config","middleware","validMiddleware","Boolean","statefulPlacement","resetCount","i","nextX","nextY","computePosition$1","isUndefined","val","undefined","isString","tooltipContainer","createTooltip","content","tipHoverable","appendTo","assign","isArray","tooltip","createElement","add","appendLine","innerHTML","line","textContent","appendChild","setTooltipContent","timer","then","style","transitionendHandler","remove","show","hide","domNode","duration","handler","handleIfTransitionend","once","eventListeners","listener","destroy","children","instance","QuillToolbarTip","quill","static","toolbar","toolbarTips","constructor","tipTextMap","Error","resolveOptions","getModule","controls","console","warn","createToolbarTip","defaultTooltipOptions","control","toolControlItem","toolName","toolControl","parentOptions","currentControlOption","targetLabel","getControlLabel","log","currentControlResult","container","tagName","previousElementSibling","querySelector","destroyAllTips","tips","item","hideAllTips"],"mappings":"uPAEa,MAAAA,EAA0E,CACrF,QAAS,IACJ,CACD,aACA,aACA,OACA,QACA,OACA,QACA,UACA,SACA,QACA,SACA,QACA,YACA,QACA,QACAC,QAAO,CAACC,EAAKC,KACbD,EAAIC,GAAQA,EAAK,GAAGC,cAAgBD,EAAKE,MAAM,GACxCH,IACN,OACA,CAAC,OAAQ,QAAS,SAAU,SAAU,UAAUD,QAAO,CAACC,EAAKC,KAC9D,MAAMG,EAA+B,CACnC,eAAgB,eAChB,cAAe,iBACf,aAAc,YACd,aAAc,eACd,eAAgB,iBAChB,cAAe,gBACf,gBAAiB,kBACjB,eAAgB,cAChB,aAAc,YACd,YAAa,eACb,YAAa,aACbA,KAAQ,OACR,WAAY,YACZ,WAAY,YACZ,WAAY,YACZ,WAAY,YACZ,WAAY,YACZ,WAAY,aASd,OAPAJ,EAAIC,GAAQ,CACVI,OAAM,CAACC,EAAgBC,KACR,UAATN,GAAqBM,IAAOA,EAAQ,QAC3B,WAATN,GAAsBM,EACnBH,EAAK,GAAGH,KAAQM,KADiBH,EAAKA,OAI1CJ,CAAG,GACT,IACH,aAAc,aACdQ,KAAQ,YACRC,KAAQ,aACRC,UAAa,CACXL,OAAOM,GACEA,EAAOC,UAAUC,SAAS,aAAe,+BAAiC,kCC1D5EC,EAAwB,CACnCC,IAAK,GACLC,MAAO,IACPN,UAAW,MACXO,UAAW,ICIPC,EAAMC,KAAKD,IACXE,EAAMD,KAAKC,IACXC,EAAQF,KAAKE,MACbC,EAAQH,KAAKG,MACbC,EAAeC,IAAM,CACzBC,EAAGD,EACHE,EAAGF,IAECG,EAAkB,CACtBC,KAAM,QACNC,MAAO,OACPC,OAAQ,MACRC,IAAK,UAEDC,EAAuB,CAC3BC,MAAO,MACPC,IAAK,SAEP,SAASC,EAAMF,EAAO1B,EAAO2B,GAC3B,OAAOd,EAAIa,EAAOf,EAAIX,EAAO2B,GAC/B,CACA,SAASE,EAAS7B,EAAO8B,GACvB,MAAwB,mBAAV9B,EAAuBA,EAAM8B,GAAS9B,CACtD,CACA,SAAS+B,EAAQC,GACf,OAAOA,EAAUC,MAAM,KAAK,EAC9B,CACA,SAASC,EAAaF,GACpB,OAAOA,EAAUC,MAAM,KAAK,EAC9B,CACA,SAASE,EAAgBC,GACvB,MAAgB,MAATA,EAAe,IAAM,GAC9B,CACA,SAASC,EAAcD,GACrB,MAAgB,MAATA,EAAe,SAAW,OACnC,CACA,SAASE,EAAYN,GACnB,MAAO,CAAC,MAAO,UAAUO,SAASR,EAAQC,IAAc,IAAM,GAChE,CACA,SAASQ,EAAiBR,GACxB,OAAOG,EAAgBG,EAAYN,GACrC,CAkBA,SAASS,EAA8BT,GACrC,OAAOA,EAAUU,QAAQ,cAAcC,GAAalB,EAAqBkB,IAC3E,CA6BA,SAASC,EAAqBZ,GAC5B,OAAOA,EAAUU,QAAQ,0BAA0BG,GAAQzB,EAAgByB,IAC7E,CAkBA,SAASC,EAAiBC,GACxB,MAAM7B,EACJA,EAACC,EACDA,EAAC6B,MACDA,EAAKC,OACLA,GACEF,EACJ,MAAO,CACLC,QACAC,SACAzB,IAAKL,EACLE,KAAMH,EACNI,MAAOJ,EAAI8B,EACXzB,OAAQJ,EAAI8B,EACZ/B,IACAC,IAEJ,CCpIA,SAAS+B,EAA2BC,EAAMnB,EAAWoB,GACnD,IAAIC,UACFA,EAASC,SACTA,GACEH,EACJ,MAAMI,EAAWjB,EAAYN,GACvBwB,EAAgBhB,EAAiBR,GACjCyB,EAAcpB,EAAcmB,GAC5BX,EAAOd,EAAQC,GACf0B,EAA0B,MAAbH,EACbI,EAAUN,EAAUnC,EAAImC,EAAUL,MAAQ,EAAIM,EAASN,MAAQ,EAC/DY,EAAUP,EAAUlC,EAAIkC,EAAUJ,OAAS,EAAIK,EAASL,OAAS,EACjEY,EAAcR,EAAUI,GAAe,EAAIH,EAASG,GAAe,EACzE,IAAIK,EACJ,OAAQjB,GACN,IAAK,MACHiB,EAAS,CACP5C,EAAGyC,EACHxC,EAAGkC,EAAUlC,EAAImC,EAASL,QAE5B,MACF,IAAK,SACHa,EAAS,CACP5C,EAAGyC,EACHxC,EAAGkC,EAAUlC,EAAIkC,EAAUJ,QAE7B,MACF,IAAK,QACHa,EAAS,CACP5C,EAAGmC,EAAUnC,EAAImC,EAAUL,MAC3B7B,EAAGyC,GAEL,MACF,IAAK,OACHE,EAAS,CACP5C,EAAGmC,EAAUnC,EAAIoC,EAASN,MAC1B7B,EAAGyC,GAEL,MACF,QACEE,EAAS,CACP5C,EAAGmC,EAAUnC,EACbC,EAAGkC,EAAUlC,GAGnB,OAAQe,EAAaF,IACnB,IAAK,QACH8B,EAAON,IAAkBK,GAAeT,GAAOM,GAAc,EAAI,GACjE,MACF,IAAK,MACHI,EAAON,IAAkBK,GAAeT,GAAOM,GAAc,EAAI,GAGrE,OAAOI,CACT,CAqGAC,eAAeC,EAAeC,EAAOC,GACnC,IAAIC,OACY,IAAZD,IACFA,EAAU,CAAE,GAEd,MAAMhD,EACJA,EAACC,EACDA,EAACiD,SACDA,EAAQC,MACRA,EAAKC,SACLA,EAAQC,SACRA,GACEN,GACEO,SACJA,EAAW,oBAAmBC,aAC9BA,EAAe,WAAUC,eACzBA,EAAiB,WAAUC,YAC3BA,GAAc,EAAKC,QACnBA,EAAU,GACR/C,EAASqC,EAASD,GAChBY,EDpER,SAA0BD,GACxB,MAA0B,iBAAZA,EAVhB,SAA6BA,GAC3B,MAAO,CACLpD,IAAK,EACLF,MAAO,EACPC,OAAQ,EACRF,KAAM,KACHuD,EAEP,CAEuCE,CAAoBF,GAAW,CAClEpD,IAAKoD,EACLtD,MAAOsD,EACPrD,OAAQqD,EACRvD,KAAMuD,EAEV,CC6DwBG,CAAiBH,GAEjCI,EAAUV,EAASK,EADa,aAAnBD,EAAgC,YAAc,WACbA,GAC9CO,EAAqBnC,QAAuBsB,EAASc,gBAAgB,CACzEF,QAAiH,OAAtGb,QAAqD,MAAtBC,EAASe,eAAoB,EAASf,EAASe,UAAUH,MAAqBb,EAAgCa,EAAUA,EAAQI,sBAAyD,MAA/BhB,EAASiB,wBAA6B,EAASjB,EAASiB,mBAAmBf,EAAShB,WACxRkB,WACAC,eACAF,cAEIxB,EAA0B,aAAnB2B,EAAgC,CAC3CxD,IACAC,IACA6B,MAAOqB,EAAMf,SAASN,MACtBC,OAAQoB,EAAMf,SAASL,QACrBoB,EAAMhB,UACJiC,QAAkD,MAA5BlB,EAASmB,qBAA0B,EAASnB,EAASmB,gBAAgBjB,EAAShB,WACpGkC,QAA4C,MAAtBpB,EAASe,eAAoB,EAASf,EAASe,UAAUG,WAA+C,MAArBlB,EAASqB,cAAmB,EAASrB,EAASqB,SAASH,KAGlK,CACFpE,EAAG,EACHC,EAAG,GAECuE,EAAoB5C,EAAiBsB,EAASuB,4DAA8DvB,EAASuB,sDAAsD,CAC/KrB,WACAvB,OACAuC,eACAf,aACGxB,GACL,MAAO,CACLvB,KAAMyD,EAAmBzD,IAAMkE,EAAkBlE,IAAMqD,EAAcrD,KAAOgE,EAAYrE,EACxFI,QAASmE,EAAkBnE,OAAS0D,EAAmB1D,OAASsD,EAActD,QAAUiE,EAAYrE,EACpGE,MAAO4D,EAAmB5D,KAAOqE,EAAkBrE,KAAOwD,EAAcxD,MAAQmE,EAAYtE,EAC5FI,OAAQoE,EAAkBpE,MAAQ2D,EAAmB3D,MAAQuD,EAAcvD,OAASkE,EAAYtE,EAEpG,CCrNA,SAAS0E,IACP,MAAyB,oBAAXC,MAChB,CACA,SAASC,EAAYC,GACnB,OAAIC,EAAOD,IACDA,EAAKE,UAAY,IAAIC,cAKxB,WACT,CACA,SAASC,EAAUJ,GACjB,IAAIK,EACJ,OAAgB,MAARL,GAA8D,OAA7CK,EAAsBL,EAAKM,oBAAyB,EAASD,EAAoBE,cAAgBT,MAC5H,CACA,SAASR,EAAmBU,GAC1B,IAAI5C,EACJ,OAA0F,OAAlFA,GAAQ6C,EAAOD,GAAQA,EAAKM,cAAgBN,EAAKQ,WAAaV,OAAOU,eAAoB,EAASpD,EAAKqD,eACjH,CACA,SAASR,EAAOhG,GACd,QAAK4F,MAGE5F,aAAiByG,MAAQzG,aAAiBmG,EAAUnG,GAAOyG,KACpE,CACA,SAAStB,EAAUnF,GACjB,QAAK4F,MAGE5F,aAAiB0G,SAAW1G,aAAiBmG,EAAUnG,GAAO0G,QACvE,CACA,SAASC,EAAc3G,GACrB,QAAK4F,MAGE5F,aAAiB4G,aAAe5G,aAAiBmG,EAAUnG,GAAO4G,YAC3E,CACA,SAASC,EAAa7G,GACpB,SAAK4F,KAAqC,oBAAfkB,cAGpB9G,aAAiB8G,YAAc9G,aAAiBmG,EAAUnG,GAAO8G,WAC1E,CACA,SAASC,EAAkB/B,GACzB,MAAMgC,SACJA,EAAQC,UACRA,EAASC,UACTA,EAASC,QACTA,GACEC,EAAiBpC,GACrB,MAAO,kCAAkCqC,KAAKL,EAAWE,EAAYD,KAAe,CAAC,SAAU,YAAY1E,SAAS4E,EACtH,CACA,SAASG,EAAetC,GACtB,MAAO,CAAC,QAAS,KAAM,MAAMzC,SAASuD,EAAYd,GACpD,CACA,SAASuC,EAAWvC,GAClB,MAAO,CAAC,gBAAiB,UAAUwC,MAAKC,IACtC,IACE,OAAOzC,EAAQ0C,QAAQD,EACxB,CAAC,MAAOE,GACP,OAAO,CACb,IAEA,CACA,SAASC,EAAkBC,GACzB,MAAMC,EAASC,IACTC,EAAM7C,EAAU0C,GAAgBT,EAAiBS,GAAgBA,EAGvE,MAAyB,SAAlBG,EAAIC,WAA4C,SAApBD,EAAIE,eAA2BF,EAAIG,eAAsC,WAAtBH,EAAIG,gBAAwCL,KAAWE,EAAII,gBAAwC,SAAvBJ,EAAII,iBAAuCN,KAAWE,EAAIK,QAAwB,SAAfL,EAAIK,QAA8B,CAAC,YAAa,cAAe,UAAUb,MAAKxH,IAAUgI,EAAIM,YAAc,IAAI/F,SAASvC,MAAW,CAAC,QAAS,SAAU,SAAU,WAAWwH,MAAKxH,IAAUgI,EAAIO,SAAW,IAAIhG,SAASvC,IAC7b,CAaA,SAAS+H,IACP,QAAmB,oBAARS,MAAwBA,IAAIC,WAChCD,IAAIC,SAAS,0BAA2B,OACjD,CACA,SAASC,EAAsB3C,GAC7B,MAAO,CAAC,OAAQ,OAAQ,aAAaxD,SAASuD,EAAYC,GAC5D,CACA,SAASqB,EAAiBpC,GACxB,OAAOmB,EAAUnB,GAASoC,iBAAiBpC,EAC7C,CACA,SAAS2D,EAAc3D,GACrB,OAAIG,EAAUH,GACL,CACL4D,WAAY5D,EAAQ4D,WACpBC,UAAW7D,EAAQ6D,WAGhB,CACLD,WAAY5D,EAAQ8D,QACpBD,UAAW7D,EAAQ+D,QAEvB,CACA,SAASC,EAAcjD,GACrB,GAA0B,SAAtBD,EAAYC,GACd,OAAOA,EAET,MAAMkD,EAENlD,EAAKmD,cAELnD,EAAKoD,YAELtC,EAAad,IAASA,EAAKqD,MAE3B/D,EAAmBU,GACnB,OAAOc,EAAaoC,GAAUA,EAAOG,KAAOH,CAC9C,CACA,SAASI,EAA2BtD,GAClC,MAAMoD,EAAaH,EAAcjD,GACjC,OAAI2C,EAAsBS,GACjBpD,EAAKM,cAAgBN,EAAKM,cAAciD,KAAOvD,EAAKuD,KAEzD3C,EAAcwC,IAAepC,EAAkBoC,GAC1CA,EAEFE,EAA2BF,EACpC,CACA,SAASI,EAAqBxD,EAAMyD,EAAMC,GACxC,IAAIC,OACS,IAATF,IACFA,EAAO,SAEe,IAApBC,IACFA,GAAkB,GAEpB,MAAME,EAAqBN,EAA2BtD,GAChD6D,EAASD,KAAuE,OAA9CD,EAAuB3D,EAAKM,oBAAyB,EAASqD,EAAqBJ,MACrHO,EAAM1D,EAAUwD,GACtB,GAAIC,EAAQ,CACV,MAAME,EAAeC,EAAgBF,GACrC,OAAOL,EAAKQ,OAAOH,EAAKA,EAAII,gBAAkB,GAAIlD,EAAkB4C,GAAsBA,EAAqB,GAAIG,GAAgBL,EAAkBF,EAAqBO,GAAgB,GAC9L,CACE,OAAON,EAAKQ,OAAOL,EAAoBJ,EAAqBI,EAAoB,GAAIF,GACtF,CACA,SAASM,EAAgBF,GACvB,OAAOA,EAAIK,QAAUC,OAAOC,eAAeP,EAAIK,QAAUL,EAAIC,aAAe,IAC9E,CCjJA,SAASO,EAAiBrF,GACxB,MAAMgD,EAAMZ,EAAiBpC,GAG7B,IAAIhC,EAAQsH,WAAWtC,EAAIhF,QAAU,EACjCC,EAASqH,WAAWtC,EAAI/E,SAAW,EACvC,MAAMsH,EAAY5D,EAAc3B,GAC1BwF,EAAcD,EAAYvF,EAAQwF,YAAcxH,EAChDyH,EAAeF,EAAYvF,EAAQyF,aAAexH,EAClDyH,EAAiB5J,EAAMkC,KAAWwH,GAAe1J,EAAMmC,KAAYwH,EAKzE,OAJIC,IACF1H,EAAQwH,EACRvH,EAASwH,GAEJ,CACLzH,QACAC,SACA0H,EAAGD,EAEP,CAEA,SAASE,EAAc5F,GACrB,OAAQG,EAAUH,GAAoCA,EAAzBA,EAAQI,cACvC,CAEA,SAASK,EAAST,GAChB,MAAM6F,EAAaD,EAAc5F,GACjC,IAAK2B,EAAckE,GACjB,OAAO7J,EAAa,GAEtB,MAAM+B,EAAO8H,EAAWC,yBAClB9H,MACJA,EAAKC,OACLA,EAAM0H,EACNA,GACEN,EAAiBQ,GACrB,IAAI3J,GAAKyJ,EAAI7J,EAAMiC,EAAKC,OAASD,EAAKC,OAASA,EAC3C7B,GAAKwJ,EAAI7J,EAAMiC,EAAKE,QAAUF,EAAKE,QAAUA,EAUjD,OANK/B,GAAM6J,OAAOC,SAAS9J,KACzBA,EAAI,GAEDC,GAAM4J,OAAOC,SAAS7J,KACzBA,EAAI,GAEC,CACLD,IACAC,IAEJ,CAEA,MAAM8J,EAAyBjK,EAAa,GAC5C,SAASkK,EAAiBlG,GACxB,MAAM6E,EAAM1D,EAAUnB,GACtB,OAAK+C,KAAe8B,EAAII,eAGjB,CACL/I,EAAG2I,EAAII,eAAekB,WACtBhK,EAAG0I,EAAII,eAAemB,WAJfH,CAMX,CAWA,SAASH,EAAsB9F,EAASqG,EAAcC,EAAiBhG,QAChD,IAAjB+F,IACFA,GAAe,QAEO,IAApBC,IACFA,GAAkB,GAEpB,MAAMC,EAAavG,EAAQ8F,wBACrBD,EAAaD,EAAc5F,GACjC,IAAIwG,EAAQxK,EAAa,GACrBqK,IACE/F,EACEH,EAAUG,KACZkG,EAAQ/F,EAASH,IAGnBkG,EAAQ/F,EAAST,IAGrB,MAAMyG,EA7BR,SAAgCzG,EAAS0G,EAASC,GAIhD,YAHgB,IAAZD,IACFA,GAAU,MAEPC,GAAwBD,GAAWC,IAAyBxF,EAAUnB,KAGpE0G,CACT,CAqBwBE,CAAuBf,EAAYS,EAAiBhG,GAAgB4F,EAAiBL,GAAc7J,EAAa,GACtI,IAAIE,GAAKqK,EAAWlK,KAAOoK,EAAcvK,GAAKsK,EAAMtK,EAChDC,GAAKoK,EAAW/J,IAAMiK,EAActK,GAAKqK,EAAMrK,EAC/C6B,EAAQuI,EAAWvI,MAAQwI,EAAMtK,EACjC+B,EAASsI,EAAWtI,OAASuI,EAAMrK,EACvC,GAAI0J,EAAY,CACd,MAAMhB,EAAM1D,EAAU0E,GAChBgB,EAAYvG,GAAgBH,EAAUG,GAAgBa,EAAUb,GAAgBA,EACtF,IAAIwG,EAAajC,EACbkC,EAAgBhC,EAAgB+B,GACpC,KAAOC,GAAiBzG,GAAgBuG,IAAcC,GAAY,CAChE,MAAME,EAAcvG,EAASsG,GACvBE,EAAaF,EAAcjB,wBAC3B9C,EAAMZ,EAAiB2E,GACvB1K,EAAO4K,EAAW5K,MAAQ0K,EAAcG,WAAa5B,WAAWtC,EAAImE,cAAgBH,EAAY9K,EAChGM,EAAMyK,EAAWzK,KAAOuK,EAAcK,UAAY9B,WAAWtC,EAAIqE,aAAeL,EAAY7K,EAClGD,GAAK8K,EAAY9K,EACjBC,GAAK6K,EAAY7K,EACjB6B,GAASgJ,EAAY9K,EACrB+B,GAAU+I,EAAY7K,EACtBD,GAAKG,EACLF,GAAKK,EACLsK,EAAa3F,EAAU4F,GACvBA,EAAgBhC,EAAgB+B,EACtC,CACA,CACE,OAAOhJ,EAAiB,CACtBE,QACAC,SACA/B,IACAC,KAEJ,CAIA,SAASmL,EAAoBtH,EAASjC,GACpC,MAAMwJ,EAAa5D,EAAc3D,GAAS4D,WAC1C,OAAK7F,EAGEA,EAAK1B,KAAOkL,EAFVzB,EAAsBzF,EAAmBL,IAAU3D,KAAOkL,CAGrE,CAEA,SAASC,EAAchG,EAAiBiG,EAAQC,QACrB,IAArBA,IACFA,GAAmB,GAErB,MAAMC,EAAWnG,EAAgBsE,wBAKjC,MAAO,CACL5J,EALQyL,EAAStL,KAAOoL,EAAO7D,YAAc8D,EAAmB,EAElEJ,EAAoB9F,EAAiBmG,IAInCxL,EAHQwL,EAASnL,IAAMiL,EAAO5D,UAKlC,CA6GA,SAAS+D,EAAkC5H,EAAS6H,EAAkBtI,GACpE,IAAIxB,EACJ,GAAyB,aAArB8J,EACF9J,EA7CJ,SAAyBiC,EAAST,GAChC,MAAMsF,EAAM1D,EAAUnB,GAChB8H,EAAOzH,EAAmBL,GAC1BiF,EAAiBJ,EAAII,eAC3B,IAAIjH,EAAQ8J,EAAKC,YACb9J,EAAS6J,EAAKE,aACd9L,EAAI,EACJC,EAAI,EACR,GAAI8I,EAAgB,CAClBjH,EAAQiH,EAAejH,MACvBC,EAASgH,EAAehH,OACxB,MAAMgK,EAAsBlF,MACvBkF,GAAuBA,GAAoC,UAAb1I,KACjDrD,EAAI+I,EAAekB,WACnBhK,EAAI8I,EAAemB,UAEzB,CACE,MAAO,CACLpI,QACAC,SACA/B,IACAC,IAEJ,CAsBW+L,CAAgBlI,EAAST,QAC3B,GAAyB,aAArBsI,EACT9J,EAlEJ,SAAyBiC,GACvB,MAAM8H,EAAOzH,EAAmBL,GAC1ByH,EAAS9D,EAAc3D,GACvBsE,EAAOtE,EAAQqB,cAAciD,KAC7BtG,EAAQnC,EAAIiM,EAAKK,YAAaL,EAAKC,YAAazD,EAAK6D,YAAa7D,EAAKyD,aACvE9J,EAASpC,EAAIiM,EAAKM,aAAcN,EAAKE,aAAc1D,EAAK8D,aAAc9D,EAAK0D,cACjF,IAAI9L,GAAKuL,EAAO7D,WAAa0D,EAAoBtH,GACjD,MAAM7D,GAAKsL,EAAO5D,UAIlB,MAHyC,QAArCzB,EAAiBkC,GAAMnJ,YACzBe,GAAKL,EAAIiM,EAAKC,YAAazD,EAAKyD,aAAe/J,GAE1C,CACLA,QACAC,SACA/B,IACAC,IAEJ,CAiDWkM,CAAgBhI,EAAmBL,SACrC,GAAIG,EAAU0H,GACnB9J,EAvBJ,SAAoCiC,EAAST,GAC3C,MAAMgH,EAAaT,EAAsB9F,GAAS,EAAmB,UAAbT,GAClD/C,EAAM+J,EAAW/J,IAAMwD,EAAQoH,UAC/B/K,EAAOkK,EAAWlK,KAAO2D,EAAQkH,WACjCV,EAAQ7E,EAAc3B,GAAWS,EAAST,GAAWhE,EAAa,GAKxE,MAAO,CACLgC,MALYgC,EAAQ+H,YAAcvB,EAAMtK,EAMxC+B,OALa+B,EAAQgI,aAAexB,EAAMrK,EAM1CD,EALQG,EAAOmK,EAAMtK,EAMrBC,EALQK,EAAMgK,EAAMrK,EAOxB,CAQWmM,CAA2BT,EAAkBtI,OAC/C,CACL,MAAMkH,EAAgBP,EAAiBlG,GACvCjC,EAAO,CACL7B,EAAG2L,EAAiB3L,EAAIuK,EAAcvK,EACtCC,EAAG0L,EAAiB1L,EAAIsK,EAActK,EACtC6B,MAAO6J,EAAiB7J,MACxBC,OAAQ4J,EAAiB5J,OAE/B,CACE,OAAOH,EAAiBC,EAC1B,CACA,SAASwK,EAAyBvI,EAASwI,GACzC,MAAMrE,EAAaH,EAAchE,GACjC,QAAImE,IAAeqE,IAAarI,EAAUgE,IAAeT,EAAsBS,MAG9B,UAA1C/B,EAAiB+B,GAAYsE,UAAwBF,EAAyBpE,EAAYqE,GACnG,CA2EA,SAASE,EAA8B1I,EAASM,EAAcf,GAC5D,MAAMoJ,EAA0BhH,EAAcrB,GACxCkB,EAAkBnB,EAAmBC,GACrCoG,EAAuB,UAAbnH,EACVxB,EAAO+H,EAAsB9F,GAAS,EAAM0G,EAASpG,GAC3D,IAAImH,EAAS,CACX7D,WAAY,EACZC,UAAW,GAEb,MAAM+E,EAAU5M,EAAa,GAC7B,GAAI2M,IAA4BA,IAA4BjC,EAI1D,IAHkC,SAA9B5F,EAAYR,IAA4ByB,EAAkBP,MAC5DiG,EAAS9D,EAAcrD,IAErBqI,EAAyB,CAC3B,MAAME,EAAa/C,EAAsBxF,GAAc,EAAMoG,EAASpG,GACtEsI,EAAQ1M,EAAI2M,EAAW3M,EAAIoE,EAAa4G,WACxC0B,EAAQzM,EAAI0M,EAAW1M,EAAImE,EAAa8G,SACzC,MAAU5F,IAGToH,EAAQ1M,EAAIoL,EAAoB9F,IAGpC,MAAMsH,GAAatH,GAAoBmH,GAA4BjC,EAAmD1K,EAAa,GAAtDwL,EAAchG,EAAiBiG,GAG5G,MAAO,CACLvL,EAHQ6B,EAAK1B,KAAOoL,EAAO7D,WAAagF,EAAQ1M,EAAI4M,EAAW5M,EAI/DC,EAHQ4B,EAAKvB,IAAMiL,EAAO5D,UAAY+E,EAAQzM,EAAI2M,EAAW3M,EAI7D6B,MAAOD,EAAKC,MACZC,OAAQF,EAAKE,OAEjB,CAEA,SAAS8K,GAAmB/I,GAC1B,MAA8C,WAAvCoC,EAAiBpC,GAASyI,QACnC,CAEA,SAASO,GAAoBhJ,EAASiJ,GACpC,IAAKtH,EAAc3B,IAAmD,UAAvCoC,EAAiBpC,GAASyI,SACvD,OAAO,KAET,GAAIQ,EACF,OAAOA,EAASjJ,GAElB,IAAIkJ,EAAkBlJ,EAAQM,aAS9B,OAHID,EAAmBL,KAAakJ,IAClCA,EAAkBA,EAAgB7H,cAAciD,MAE3C4E,CACT,CAIA,SAAS3I,GAAgBP,EAASiJ,GAChC,MAAMpE,EAAM1D,EAAUnB,GACtB,GAAIuC,EAAWvC,GACb,OAAO6E,EAET,IAAKlD,EAAc3B,GAAU,CAC3B,IAAImJ,EAAkBnF,EAAchE,GACpC,KAAOmJ,IAAoBzF,EAAsByF,IAAkB,CACjE,GAAIhJ,EAAUgJ,KAAqBJ,GAAmBI,GACpD,OAAOA,EAETA,EAAkBnF,EAAcmF,EACtC,CACI,OAAOtE,CACX,CACE,IAAIvE,EAAe0I,GAAoBhJ,EAASiJ,GAChD,KAAO3I,GAAgBgC,EAAehC,IAAiByI,GAAmBzI,IACxEA,EAAe0I,GAAoB1I,EAAc2I,GAEnD,OAAI3I,GAAgBoD,EAAsBpD,IAAiByI,GAAmBzI,KAAkBsC,EAAkBtC,GACzGuE,EAEFvE,GDtXT,SAA4BN,GAC1B,IAAIoJ,EAAcpF,EAAchE,GAChC,KAAO2B,EAAcyH,KAAiB1F,EAAsB0F,IAAc,CACxE,GAAIxG,EAAkBwG,GACpB,OAAOA,EACF,GAAI7G,EAAW6G,GACpB,OAAO,KAETA,EAAcpF,EAAcoF,EAChC,CACE,OAAO,IACT,CC2WyBC,CAAmBrJ,IAAY6E,CACxD,CAqBA,MAAMzF,GAAW,CACfuB,sDAxTF,SAA+DxC,GAC7D,IAAImB,SACFA,EAAQvB,KACRA,EAAIuC,aACJA,EAAYf,SACZA,GACEpB,EACJ,MAAMuI,EAAuB,UAAbnH,EACViC,EAAkBnB,EAAmBC,GACrCgJ,IAAWhK,GAAWiD,EAAWjD,EAAShB,UAChD,GAAIgC,IAAiBkB,GAAmB8H,GAAY5C,EAClD,OAAO3I,EAET,IAAI0J,EAAS,CACX7D,WAAY,EACZC,UAAW,GAET2C,EAAQxK,EAAa,GACzB,MAAM4M,EAAU5M,EAAa,GACvB2M,EAA0BhH,EAAcrB,GAC9C,IAAIqI,IAA4BA,IAA4BjC,MACxB,SAA9B5F,EAAYR,IAA4ByB,EAAkBP,MAC5DiG,EAAS9D,EAAcrD,IAErBqB,EAAcrB,IAAe,CAC/B,MAAMuI,EAAa/C,EAAsBxF,GACzCkG,EAAQ/F,EAASH,GACjBsI,EAAQ1M,EAAI2M,EAAW3M,EAAIoE,EAAa4G,WACxC0B,EAAQzM,EAAI0M,EAAW1M,EAAImE,EAAa8G,SAC9C,CAEE,MAAM0B,GAAatH,GAAoBmH,GAA4BjC,EAAyD1K,EAAa,GAA5DwL,EAAchG,EAAiBiG,GAAQ,GACpH,MAAO,CACLzJ,MAAOD,EAAKC,MAAQwI,EAAMtK,EAC1B+B,OAAQF,EAAKE,OAASuI,EAAMrK,EAC5BD,EAAG6B,EAAK7B,EAAIsK,EAAMtK,EAAIuL,EAAO7D,WAAa4C,EAAMtK,EAAI0M,EAAQ1M,EAAI4M,EAAW5M,EAC3EC,EAAG4B,EAAK5B,EAAIqK,EAAMrK,EAAIsL,EAAO5D,UAAY2C,EAAMrK,EAAIyM,EAAQzM,EAAI2M,EAAW3M,EAE9E,EAmREkE,qBACAH,gBAhJF,SAAyB/B,GACvB,IAAI6B,QACFA,EAAOR,SACPA,EAAQC,aACRA,EAAYF,SACZA,GACEpB,EACJ,MACMoL,EAAoB,IADoB,sBAAb/J,EAAmC+C,EAAWvC,GAAW,GAxC5F,SAAqCA,EAASwJ,GAC5C,MAAMC,EAAeD,EAAME,IAAI1J,GAC/B,GAAIyJ,EACF,OAAOA,EAET,IAAIxF,EAASM,EAAqBvE,EAAS,IAAI,GAAOqD,QAAOsG,GAAMxJ,EAAUwJ,IAA2B,SAApB7I,EAAY6I,KAC5FC,EAAsC,KAC1C,MAAMC,EAAwD,UAAvCzH,EAAiBpC,GAASyI,SACjD,IAAIW,EAAcS,EAAiB7F,EAAchE,GAAWA,EAG5D,KAAOG,EAAUiJ,KAAiB1F,EAAsB0F,IAAc,CACpE,MAAMU,EAAgB1H,EAAiBgH,GACjCW,EAA0BnH,EAAkBwG,GAC7CW,GAAsD,UAA3BD,EAAcrB,WAC5CmB,EAAsC,OAEVC,GAAkBE,IAA4BH,GAAuCG,GAAsD,WAA3BD,EAAcrB,UAA2BmB,GAAuC,CAAC,WAAY,SAASrM,SAASqM,EAAoCnB,WAAa1G,EAAkBqH,KAAiBW,GAA2BxB,EAAyBvI,EAASoJ,IAG5YnF,EAASA,EAAOZ,QAAO2G,GAAYA,IAAaZ,IAGhDQ,EAAsCE,EAExCV,EAAcpF,EAAcoF,EAChC,CAEE,OADAI,EAAMS,IAAIjK,EAASiE,GACZA,CACT,CAWiGiG,CAA4BlK,EAASmK,KAAKC,IAAM,GAAGpF,OAAOxF,GACjGC,GAClD4K,EAAwBd,EAAkB,GAC1Ce,EAAef,EAAkB/O,QAAO,CAAC+P,EAAS1C,KACtD,MAAM9J,EAAO6J,EAAkC5H,EAAS6H,EAAkBtI,GAK1E,OAJAgL,EAAQ/N,IAAMX,EAAIkC,EAAKvB,IAAK+N,EAAQ/N,KACpC+N,EAAQjO,MAAQX,EAAIoC,EAAKzB,MAAOiO,EAAQjO,OACxCiO,EAAQhO,OAASZ,EAAIoC,EAAKxB,OAAQgO,EAAQhO,QAC1CgO,EAAQlO,KAAOR,EAAIkC,EAAK1B,KAAMkO,EAAQlO,MAC/BkO,CAAO,GACb3C,EAAkC5H,EAASqK,EAAuB9K,IACrE,MAAO,CACLvB,MAAOsM,EAAahO,MAAQgO,EAAajO,KACzC4B,OAAQqM,EAAa/N,OAAS+N,EAAa9N,IAC3CN,EAAGoO,EAAajO,KAChBF,EAAGmO,EAAa9N,IAEpB,EAyHE+D,mBACAiK,gBAxBsBzL,eAAgB0L,GACtC,MAAMC,EAAoBP,KAAK5J,iBAAmBA,GAC5CoK,EAAkBR,KAAKS,cACvBC,QAA2BF,EAAgBF,EAAKnM,UACtD,MAAO,CACLD,UAAWqK,EAA8B+B,EAAKpM,gBAAiBqM,EAAkBD,EAAKnM,UAAWmM,EAAKlL,UACtGjB,SAAU,CACRpC,EAAG,EACHC,EAAG,EACH6B,MAAO6M,EAAmB7M,MAC1BC,OAAQ4M,EAAmB5M,QAGjC,EAYE6M,eArRF,SAAwB9K,GACtB,OAAO+K,MAAMC,KAAKhL,EAAQ8K,iBAC5B,EAoREF,cA1HF,SAAuB5K,GACrB,MAAMhC,MACJA,EAAKC,OACLA,GACEoH,EAAiBrF,GACrB,MAAO,CACLhC,QACAC,SAEJ,EAkHEwC,WACAN,YACA8K,MAdF,SAAejL,GACb,MAA+C,QAAxCoC,EAAiBpC,GAAS7E,SACnC,GAoGA,SAAS+P,GAAW7M,EAAWC,EAAU6M,EAAQjM,QAC/B,IAAZA,IACFA,EAAU,CAAE,GAEd,MAAMkM,eACJA,GAAiB,EAAIC,eACrBA,GAAiB,EAAIC,cACrBA,EAA0C,mBAAnBC,eAA6BC,YACpDA,EAA8C,mBAAzBC,qBAAmCC,eACxDA,GAAiB,GACfxM,EACEyM,EAAc/F,EAAcvH,GAC5BuN,EAAYR,GAAkBC,EAAiB,IAAKM,EAAcpH,EAAqBoH,GAAe,MAAQpH,EAAqBjG,IAAa,GACtJsN,EAAUC,SAAQ7B,IAChBoB,GAAkBpB,EAAS8B,iBAAiB,SAAUX,EAAQ,CAC5DY,SAAS,IAEXV,GAAkBrB,EAAS8B,iBAAiB,SAAUX,EAAO,IAE/D,MAAMa,EAAYL,GAAeH,EAvGnC,SAAqBxL,EAASiM,GAC5B,IACIC,EADAC,EAAK,KAET,MAAMC,EAAO/L,EAAmBL,GAChC,SAASqM,IACP,IAAIC,EACJC,aAAaL,GACC,OAAbI,EAAMH,IAAeG,EAAIE,aAC1BL,EAAK,IACT,CAgEE,OA/DA,SAASM,EAAQC,EAAMC,QACR,IAATD,IACFA,GAAO,QAES,IAAdC,IACFA,EAAY,GAEdN,IACA,MAAMhQ,KACJA,EAAIG,IACJA,EAAGwB,MACHA,EAAKC,OACLA,GACE+B,EAAQ8F,wBAIZ,GAHK4G,GACHT,KAEGjO,IAAUC,EACb,OAEF,MAKMiB,EAAU,CACd0N,YANe7Q,EAAMS,GAIQ,OAHZT,EAAMqQ,EAAKrE,aAAe1L,EAAO2B,IAGC,OAFjCjC,EAAMqQ,EAAKpE,cAAgBxL,EAAMyB,IAEuB,OAD1DlC,EAAMM,GACyE,KAG/FsQ,UAAW9Q,EAAI,EAAGF,EAAI,EAAGgR,KAAe,GAE1C,IAAIE,GAAgB,EACpB,SAASC,EAAcC,GACrB,MAAMC,EAAQD,EAAQ,GAAGE,kBACzB,GAAID,IAAUL,EAAW,CACvB,IAAKE,EACH,OAAOJ,IAEJO,EAOHP,GAAQ,EAAOO,GAJfd,EAAYgB,YAAW,KACrBT,GAAQ,EAAO,KAAK,GACnB,IAIb,CACMI,GAAgB,CACtB,CAII,IACEV,EAAK,IAAIV,qBAAqBqB,EAAe,IACxC5N,EAEHkN,KAAMA,EAAK/K,eAEd,CAAC,MAAOsB,GACPwJ,EAAK,IAAIV,qBAAqBqB,EAAe5N,EACnD,CACIiN,EAAGgB,QAAQnN,EACf,CACEyM,EAAQ,GACDJ,CACT,CA6BiDe,CAAYzB,EAAaR,GAAU,KAClF,IAsBIkC,EAtBAC,GAAkB,EAClBC,EAAiB,KACjBjC,IACFiC,EAAiB,IAAIhC,gBAAepN,IAClC,IAAKqP,GAAcrP,EACfqP,GAAcA,EAAWpS,SAAWuQ,GAAe4B,IAGrDA,EAAeE,UAAUnP,GACzBoP,qBAAqBJ,GACrBA,EAAiBK,uBAAsB,KACrC,IAAIC,EACkC,OAArCA,EAAkBL,IAA2BK,EAAgBT,QAAQ7O,EAAS,KAGnF6M,GAAQ,IAENQ,IAAgBD,GAClB6B,EAAeJ,QAAQxB,GAEzB4B,EAAeJ,QAAQ7O,IAGzB,IAAIuP,EAAcnC,EAAiB5F,EAAsBzH,GAAa,KAatE,OAZIqN,GAGJ,SAASoC,IACP,MAAMC,EAAcjI,EAAsBzH,IACtCwP,GAAgBE,EAAY7R,IAAM2R,EAAY3R,GAAK6R,EAAY5R,IAAM0R,EAAY1R,GAAK4R,EAAY/P,QAAU6P,EAAY7P,OAAS+P,EAAY9P,SAAW4P,EAAY5P,QACtKkN,IAEF0C,EAAcE,EACdV,EAAUM,sBAAsBG,EACpC,CATIA,GAUF3C,IACO,KACL,IAAI6C,EACJpC,EAAUC,SAAQ7B,IAChBoB,GAAkBpB,EAASiE,oBAAoB,SAAU9C,GACzDE,GAAkBrB,EAASiE,oBAAoB,SAAU9C,EAAO,IAErD,MAAba,GAAqBA,IACkB,OAAtCgC,EAAmBT,IAA2BS,EAAiBxB,aAChEe,EAAiB,KACb7B,GACFgC,qBAAqBL,EAC3B,CAEA,CAmBA,MAAMa,GF0HS,SAAUhP,GAIvB,YAHgB,IAAZA,IACFA,EAAU,GAEL,CACLxE,KAAM,SACNwE,UACA,QAAMiP,CAAGlP,GACP,IAAImP,EAAuBC,EAC3B,MAAMnS,EACJA,EAACC,EACDA,EAACa,UACDA,EAASsR,eACTA,GACErP,EACEsP,QA9DZxP,eAAoCE,EAAOC,GACzC,MAAMlC,UACJA,EAASoC,SACTA,EAAQE,SACRA,GACEL,EACEb,QAA+B,MAAlBgB,EAAS6L,WAAgB,EAAS7L,EAAS6L,MAAM3L,EAAShB,WACvET,EAAOd,EAAQC,GACfW,EAAYT,EAAaF,GACzB0B,EAAwC,MAA3BpB,EAAYN,GACzBwR,EAAgB,CAAC,OAAQ,OAAOjR,SAASM,IAAS,EAAI,EACtD4Q,EAAiBrQ,GAAOM,GAAc,EAAI,EAC1CgQ,EAAW7R,EAASqC,EAASD,GAGnC,IAAI0P,SACFA,EAAQC,UACRA,EAASpQ,cACTA,GACsB,iBAAbkQ,EAAwB,CACjCC,SAAUD,EACVE,UAAW,EACXpQ,cAAe,MACb,CACFmQ,SAAUD,EAASC,UAAY,EAC/BC,UAAWF,EAASE,WAAa,EACjCpQ,cAAekQ,EAASlQ,eAK1B,OAHIb,GAAsC,iBAAlBa,IACtBoQ,EAA0B,QAAdjR,GAAuC,EAAjBa,EAAqBA,GAElDE,EAAa,CAClBxC,EAAG0S,EAAYH,EACftS,EAAGwS,EAAWH,GACZ,CACFtS,EAAGyS,EAAWH,EACdrS,EAAGyS,EAAYH,EAEnB,CAwB+BI,CAAqB5P,EAAOC,GAIrD,OAAIlC,KAAkE,OAAlDoR,EAAwBE,EAAeJ,aAAkB,EAASE,EAAsBpR,YAAgE,OAAjDqR,EAAwBC,EAAeQ,QAAkBT,EAAsBU,gBACjM,CAAE,EAEJ,CACL7S,EAAGA,EAAIqS,EAAWrS,EAClBC,EAAGA,EAAIoS,EAAWpS,EAClBsO,KAAM,IACD8D,EACHvR,aAGV,EAEA,EE3IMgS,GFkJQ,SAAU9P,GAItB,YAHgB,IAAZA,IACFA,EAAU,CAAE,GAEP,CACLxE,KAAM,QACNwE,UACA,QAAMiP,CAAGlP,GACP,MAAM/C,EACJA,EAACC,EACDA,EAACa,UACDA,GACEiC,GAEF0P,SAAUM,GAAgB,EAC1BL,UAAWM,GAAiB,EAAKC,QACjCA,EAAU,CACRhB,GAAIhQ,IACF,IAAIjC,EACFA,EAACC,EACDA,GACEgC,EACJ,MAAO,CACLjC,IACAC,IACD,MAGFiT,GACDvS,EAASqC,EAASD,GAChBH,EAAS,CACb5C,IACAC,KAEI6F,QAAiBhD,EAAeC,EAAOmQ,GACvCR,EAAYtR,EAAYP,EAAQC,IAChC2R,EAAWxR,EAAgByR,GACjC,IAAIS,EAAgBvQ,EAAO6P,GACvBW,EAAiBxQ,EAAO8P,GAC5B,GAAIK,EAAe,CACjB,MACMM,EAAuB,MAAbZ,EAAmB,SAAW,QAG9CU,EAAgBzS,EAFJyS,EAAgBrN,EAFC,MAAb2M,EAAmB,MAAQ,QAIhBU,EADfA,EAAgBrN,EAASuN,GAE7C,CACM,GAAIL,EAAgB,CAClB,MACMK,EAAwB,MAAdX,EAAoB,SAAW,QAG/CU,EAAiB1S,EAFL0S,EAAiBtN,EAFC,MAAd4M,EAAoB,MAAQ,QAIhBU,EADhBA,EAAiBtN,EAASuN,GAE9C,CACM,MAAMC,EAAgBL,EAAQhB,GAAG,IAC5BlP,EACH0P,CAACA,GAAWU,EACZT,CAACA,GAAYU,IAEf,MAAO,IACFE,EACH/E,KAAM,CACJvO,EAAGsT,EAActT,EAAIA,EACrBC,EAAGqT,EAAcrT,EAAIA,EACrBsT,QAAS,CACPd,CAACA,GAAWM,EACZL,CAACA,GAAYM,IAIzB,EAEA,EEjNMQ,GF/QO,SAAUxQ,GAIrB,YAHgB,IAAZA,IACFA,EAAU,CAAE,GAEP,CACLxE,KAAM,OACNwE,UACA,QAAMiP,CAAGlP,GACP,IAAIoP,EAAuBsB,EAC3B,MAAM3S,UACJA,EAASsR,eACTA,EAAcjP,MACdA,EAAKuQ,iBACLA,EAAgBxQ,SAChBA,EAAQE,SACRA,GACEL,GAEF0P,SAAUM,GAAgB,EAC1BL,UAAWM,GAAiB,EAC5BW,mBAAoBC,EAA2BC,iBAC/CA,EAAmB,UAASC,0BAC5BA,EAA4B,OAAMC,cAClCA,GAAgB,KACbb,GACDvS,EAASqC,EAASD,GAMtB,GAAsD,OAAjDoP,EAAwBC,EAAeQ,QAAkBT,EAAsBU,gBAClF,MAAO,CAAE,EAEX,MAAMlR,EAAOd,EAAQC,GACfkT,EAAkB5S,EAAYsS,GAC9BO,EAAkBpT,EAAQ6S,KAAsBA,EAChDxR,QAA+B,MAAlBgB,EAAS6L,WAAgB,EAAS7L,EAAS6L,MAAM3L,EAAShB,WACvEuR,EAAqBC,IAAgCK,IAAoBF,EAAgB,CAACrS,EAAqBgS,ID7X3H,SAA+B5S,GAC7B,MAAMoT,EAAoBxS,EAAqBZ,GAC/C,MAAO,CAACS,EAA8BT,GAAYoT,EAAmB3S,EAA8B2S,GACrG,CC0XgJC,CAAsBT,IAC1JU,EAA6D,SAA9BN,GAChCF,GAA+BQ,GAClCT,EAAmBU,QDxW3B,SAAmCvT,EAAWiT,EAAe9U,EAAWiD,GACtE,MAAMT,EAAYT,EAAaF,GAC/B,IAAIwH,EAnBN,SAAqB3G,EAAM2S,EAASpS,GAClC,MAAMqS,EAAK,CAAC,OAAQ,SACdC,EAAK,CAAC,QAAS,QACfC,EAAK,CAAC,MAAO,UACbC,EAAK,CAAC,SAAU,OACtB,OAAQ/S,GACN,IAAK,MACL,IAAK,SACH,OAAIO,EAAYoS,EAAUE,EAAKD,EACxBD,EAAUC,EAAKC,EACxB,IAAK,OACL,IAAK,QACH,OAAOF,EAAUG,EAAKC,EACxB,QACE,MAAO,GAEb,CAGaC,CAAY9T,EAAQC,GAA0B,UAAd7B,EAAuBiD,GAOlE,OANIT,IACF6G,EAAOA,EAAK/J,KAAIoD,GAAQA,EAAO,IAAMF,IACjCsS,IACFzL,EAAOA,EAAKQ,OAAOR,EAAK/J,IAAIgD,MAGzB+G,CACT,CC8VmCsM,CAA0BlB,EAAkBK,EAAeD,EAA2B5R,IAEnH,MAAM2S,EAAa,CAACnB,KAAqBC,GACnC7N,QAAiBhD,EAAeC,EAAOmQ,GACvC4B,EAAY,GAClB,IAAIC,GAAiE,OAA/CtB,EAAuBrB,EAAeoB,WAAgB,EAASC,EAAqBqB,YAAc,GAIxH,GAHI/B,GACF+B,EAAUT,KAAKvO,EAASnE,IAEtBqR,EAAgB,CAClB,MAAMgC,EDvZd,SAA2BlU,EAAWqC,EAAOjB,QAC/B,IAARA,IACFA,GAAM,GAER,MAAMT,EAAYT,EAAaF,GACzBwB,EAAgBhB,EAAiBR,GACjCmU,EAAS9T,EAAcmB,GAC7B,IAAI4S,EAAsC,MAAlB5S,EAAwBb,KAAeS,EAAM,MAAQ,SAAW,QAAU,OAAuB,UAAdT,EAAwB,SAAW,MAI9I,OAHI0B,EAAMhB,UAAU8S,GAAU9R,EAAMf,SAAS6S,KAC3CC,EAAoBxT,EAAqBwT,IAEpC,CAACA,EAAmBxT,EAAqBwT,GAClD,CC2YsBC,CAAkBrU,EAAWqC,EAAOjB,GAClD4S,EAAUT,KAAKvO,EAASkP,EAAM,IAAKlP,EAASkP,EAAM,IAC1D,CAOM,GANAD,EAAgB,IAAIA,EAAe,CACjCjU,YACAgU,eAIGA,EAAUM,OAAMzT,GAAQA,GAAQ,IAAI,CACvC,IAAI0T,EAAuBC,EAC3B,MAAMC,IAA+D,OAAhDF,EAAwBjD,EAAeoB,WAAgB,EAAS6B,EAAsBG,QAAU,GAAK,EACpHC,EAAgBZ,EAAWU,GACjC,GAAIE,EAEF,MAAO,CACLlH,KAAM,CACJiH,MAAOD,EACPT,UAAWC,GAEbW,MAAO,CACL5U,UAAW2U,IAOjB,IAAIE,EAAgJ,OAA9HL,EAAwBP,EAAc5N,QAAOyO,GAAKA,EAAEd,UAAU,IAAM,IAAGe,MAAK,CAACC,EAAGC,IAAMD,EAAEhB,UAAU,GAAKiB,EAAEjB,UAAU,KAAI,SAAc,EAASQ,EAAsBxU,UAG1L,IAAK6U,EACH,OAAQ9B,GACN,IAAK,UACH,CACE,IAAImC,EACJ,MAAMlV,EASmJ,OATtIkV,EAAyBjB,EAAc5N,QAAOyO,IAC/D,GAAIxB,EAA8B,CAChC,MAAM6B,EAAkB7U,EAAYwU,EAAE9U,WACtC,OAAOmV,IAAoBjC,GAGP,MAApBiC,CACpB,CACkB,OAAO,CAAI,IACV1X,KAAIqX,GAAK,CAACA,EAAE9U,UAAW8U,EAAEd,UAAU3N,QAAOrB,GAAYA,EAAW,IAAGxH,QAAO,CAAC4X,EAAKpQ,IAAaoQ,EAAMpQ,GAAU,MAAK+P,MAAK,CAACC,EAAGC,IAAMD,EAAE,GAAKC,EAAE,KAAI,SAAc,EAASC,EAAuB,GAC5LlV,IACF6U,EAAiB7U,GAEnB,KAChB,CACY,IAAK,mBACH6U,EAAiBjC,EAIvB,GAAI5S,IAAc6U,EAChB,MAAO,CACLD,MAAO,CACL5U,UAAW6U,GAIzB,CACM,MAAO,CAAE,CACf,EAEA,EE2LMQ,GFmLa,SAAUnT,GAI3B,YAHgB,IAAZA,IACFA,EAAU,CAAE,GAEP,CACLA,UACA,EAAAiP,CAAGlP,GACD,MAAM/C,EACJA,EAACC,EACDA,EAACa,UACDA,EAASqC,MACTA,EAAKiP,eACLA,GACErP,GACEiP,OACJA,EAAS,EACTS,SAAUM,GAAgB,EAC1BL,UAAWM,GAAiB,GAC1BrS,EAASqC,EAASD,GAChBH,EAAS,CACb5C,IACAC,KAEIyS,EAAYtR,EAAYN,GACxB2R,EAAWxR,EAAgByR,GACjC,IAAIS,EAAgBvQ,EAAO6P,GACvBW,EAAiBxQ,EAAO8P,GAC5B,MAAM0D,EAAYzV,EAASqR,EAAQjP,GAC7BsT,EAAsC,iBAAdD,EAAyB,CACrD3D,SAAU2D,EACV1D,UAAW,GACT,CACFD,SAAU,EACVC,UAAW,KACR0D,GAEL,GAAIrD,EAAe,CACjB,MAAMuD,EAAmB,MAAb7D,EAAmB,SAAW,QACpC8D,EAAWpT,EAAMhB,UAAUsQ,GAAYtP,EAAMf,SAASkU,GAAOD,EAAe5D,SAC5E+D,EAAWrT,EAAMhB,UAAUsQ,GAAYtP,EAAMhB,UAAUmU,GAAOD,EAAe5D,SAC/EU,EAAgBoD,EAClBpD,EAAgBoD,EACPpD,EAAgBqD,IACzBrD,EAAgBqD,EAE1B,CACM,GAAIxD,EAAgB,CAClB,IAAId,EAAuBuE,EAC3B,MAAMH,EAAmB,MAAb7D,EAAmB,QAAU,SACnCiE,EAAe,CAAC,MAAO,QAAQrV,SAASR,EAAQC,IAChDyV,EAAWpT,EAAMhB,UAAUuQ,GAAavP,EAAMf,SAASkU,IAAQI,IAAmE,OAAlDxE,EAAwBE,EAAeJ,aAAkB,EAASE,EAAsBQ,KAAmB,IAAMgE,EAAe,EAAIL,EAAe3D,WACnO8D,EAAWrT,EAAMhB,UAAUuQ,GAAavP,EAAMhB,UAAUmU,IAAQI,EAAe,GAAyD,OAAnDD,EAAyBrE,EAAeJ,aAAkB,EAASyE,EAAuB/D,KAAe,IAAMgE,EAAeL,EAAe3D,UAAY,GAChPU,EAAiBmD,EACnBnD,EAAiBmD,EACRnD,EAAiBoD,IAC1BpD,EAAiBoD,EAE3B,CACM,MAAO,CACL/D,CAACA,GAAWU,EACZT,CAACA,GAAYU,EAErB,EAEA,EE7OMuD,GAAkB,CAACxU,EAAWC,EAAUY,KAI5C,MAAMsK,EAAQ,IAAIsJ,IACZC,EAAgB,CACpB3T,eACGF,GAEC8T,EAAoB,IACrBD,EAAc3T,SACjBgL,GAAIZ,GAEN,MFxpBsBzK,OAAOV,EAAWC,EAAU2U,KAClD,MAAMjW,UACJA,EAAY,SAAQuC,SACpBA,EAAW,WAAU2T,WACrBA,EAAa,GAAE9T,SACfA,GACE6T,EACEE,EAAkBD,EAAW7P,OAAO+P,SACpChV,QAA+B,MAAlBgB,EAAS6L,WAAgB,EAAS7L,EAAS6L,MAAM3M,IACpE,IAAIe,QAAcD,EAASoL,gBAAgB,CACzCnM,YACAC,WACAiB,cAEErD,EACFA,EAACC,EACDA,GACE+B,EAA2BmB,EAAOrC,EAAWoB,GAC7CiV,EAAoBrW,EACpBsR,EAAiB,CAAE,EACnBgF,EAAa,EACjB,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAgBhC,OAAQoC,IAAK,CAC/C,MAAM7Y,KACJA,EAAIyT,GACJA,GACEgF,EAAgBI,IAElBrX,EAAGsX,EACHrX,EAAGsX,EAAKhJ,KACRA,EAAImH,MACJA,SACQzD,EAAG,CACXjS,IACAC,IACAyT,iBAAkB5S,EAClBA,UAAWqW,EACX9T,WACA+O,iBACAjP,QACAD,WACAE,SAAU,CACRjB,YACAC,cAGJpC,EAAa,MAATsX,EAAgBA,EAAQtX,EAC5BC,EAAa,MAATsX,EAAgBA,EAAQtX,EAC5BmS,EAAiB,IACZA,EACH5T,CAACA,GAAO,IACH4T,EAAe5T,MACf+P,IAGHmH,GAAS0B,GAAc,KACzBA,IACqB,iBAAV1B,IACLA,EAAM5U,YACRqW,EAAoBzB,EAAM5U,WAExB4U,EAAMvS,QACRA,GAAwB,IAAhBuS,EAAMvS,YAAuBD,EAASoL,gBAAgB,CAC5DnM,YACAC,WACAiB,aACGqS,EAAMvS,SAGXnD,IACAC,KACE+B,EAA2BmB,EAAOgU,EAAmBjV,KAE3DmV,GAAK,EAEX,CACE,MAAO,CACLrX,IACAC,IACAa,UAAWqW,EACX9T,WACA+O,iBACD,EEukBMoF,CAAkBrV,EAAWC,EAAU,IACzCyU,EACH3T,SAAU4T,GACV,EC7tBSW,GAAeC,QAAuCC,IAARD,EAC9CE,GAAYF,GAA2C,iBAARA,ECiC5D,IAAIG,GACG,MAAMC,GAAgB,CAAC5Y,EAAqB8D,EAAmC,MACpF,IAAI1D,IACFA,EAAM,GAAEC,MACRA,EAAQ,IAAGwY,QACXA,EAAO9Y,UACPA,EAAY,MAAKO,UACjBA,EAAY,GAAEwY,aACdA,GAAe,EAAIpZ,OACnBA,EAAMqZ,SACNA,EAAW5S,SAAS+C,MAClBa,OAAOiP,OAAO,CAAA,EAAI7Y,EAAuB2D,GD1CpB,IAAClE,EC8C1B,GAHI8Y,GAASpY,KD3CaV,EC4CAU,EAAUuB,MAAM,KAAxCvB,ED5CwCqP,MAAMsJ,QAAQrZ,GAAUA,GAAS,GAAM,CAACA,IC8C9EQ,GAAOyY,GAAWnZ,EAAQ,CAC5B,MAAMwZ,EAAU/S,SAASgT,cAAc,OACvCD,EAAQjZ,UAAUmZ,IAAI,uBAAwB,SAAU,iBAAkB9Y,GAE1E,MAAM+Y,EAAcjZ,IAClB8Y,EAAQI,UAAY,GACpB,IAAK,MAAM7Z,KAAQW,EAAIyB,MAAM,MAAO,CAClC,MAAM0X,EAAOpT,SAASgT,cAAc,OACpCI,EAAKC,YAAc/Z,EACnByZ,EAAQO,YAAYF,KAGlBG,EAAoB,KAOxB,GANIb,GACFK,EAAQO,YAAYZ,GAElBzY,GACFiZ,EAAWjZ,GAETV,EAAQ,CACV,MAAMmJ,EAASnJ,EAAOM,GACtB,GAAI0Y,GAAS7P,GACXwQ,EAAWxQ,OAER,KAAIA,EAIP,OAAO,EAHPqQ,EAAQO,YAAY5Q,IAMxB,OAAOmP,QAAQa,GAAWzY,GAAOV,EAAO,EAG1C,IAAIia,EACA1I,EACJ,MAAMlB,EAAS,KACb0H,GAAgBzX,EAAQkZ,EAAS,CAC/BtX,UAAW7B,EACX+X,WAAY,CAACxD,KAAQV,GAAM,CAAEG,QAASkD,OAAiBnE,GAAO,MAC7D8G,MAAK,EAAG9Y,IAAGC,QACZgJ,OAAOiP,OAAOE,EAAQW,MAAO,CAC3B5Y,KAAM,GAAGH,MACTM,IAAK,GAAGL,OACR,GACF,EAEE+Y,EAAuB,KAC3BZ,EAAQjZ,UAAUmZ,IAAI,UACtBF,EAAQa,SACJ9I,GAASA,GAAS,EAExB,SAAS+I,IACHL,GAAOxI,aAAawI,GACxBA,EAAQ7H,YAAW,KAEQ4H,MAGpBf,KACHA,GAAmBxS,SAASgT,cAAc,OAC1CJ,EAASU,YAAYd,KAEvBA,GAAiBc,YAAYP,GAC7BA,EAAQrG,oBAAoB,gBAAiBiH,GAC7CZ,EAAQjZ,UAAU8Z,OAAO,UAEzB9I,EAAUnB,GAAW9P,EAAQkZ,EAASnJ,GAEtCmJ,EAAQjZ,UAAU8Z,OAAO,eAAc,GACtC1Z,GAGL,SAAS4Z,IACHN,GAAOxI,aAAawI,GACxBA,EAAQ7H,YAAW,KACjBoH,EAAQjZ,UAAUmZ,IAAI,eC7HO,EAACc,EAAsBC,EAAkBC,EAAqBtW,KAEjGoW,EAAQxJ,iBAAiB,gBAAiB0J,EAAStW,GAE5CgO,YAAW,KAChBsI,GAAS,GACRD,EAAS,EDwHNE,CAAsBnB,EAAS,IAAKY,EAAsB,CAAEQ,MAAM,GAAO,GACxEja,GAGL,MAAMka,EAAiB,CAACva,GACpB8Y,GACFyB,EAAepF,KAAK+D,GAEtB,IAAK,MAAMsB,KAAYD,EACrBC,EAAS9J,iBAAiB,aAAcsJ,GACxCQ,EAAS9J,iBAAiB,aAAcuJ,GAG1C,MAAMQ,EAAU,KACd,IAAK,MAAMD,KAAYD,EACrBC,EAAS3H,oBAAoB,aAAcmH,GAC3CQ,EAAS3H,oBAAoB,aAAcoH,GAEzChJ,GAASA,IACbiI,EAAQa,SACJpB,IAAoBA,GAAiB+B,SAAS3E,QAAU,GAC1D4C,GAAiBoB,UAIrB,MAAO,CACLY,SAAUzB,EACVuB,UACAT,OACAC,QAGJ,OAAO,IAAI,QEhJAW,GAMFC,MALTC,kBAAoB,cACpBhX,QACAiX,QACAC,YAA2C,GAC3C,WAAAC,CACSJ,EACP/W,GAEA,GAHOiL,KAAK8L,MAALA,GAGF/W,EAAQoX,WACX,MAAM,IAAIC,MAAM,+BAIlB,GAFApM,KAAKjL,QAAUiL,KAAKqM,eAAetX,GACnCiL,KAAKgM,QAAUhM,KAAK8L,MAAMQ,UAAU,YAC/BtM,KAAKgM,QACR,MAAM,IAAII,MAAM,+BAEbpM,KAAKgM,SAAWhM,KAAKgM,QAAQO,SAASvF,QAAU,EACnDwF,QAAQC,KAAK,+CAGbzM,KAAK0M,mBAIT,cAAAL,CAAetX,GACb,MAAO,CACL4X,sBAAuB3R,OAAOiP,OAAO,CAAE,EAAE7Y,EAAuB2D,EAAQ4X,uBACxER,WAAYpX,EAAQoX,YAAc,CAAE,GAIxC,gBAAAO,GACE,IAAK,MAAME,KAAW5M,KAAKgM,QAAQO,SAAU,CAC3C,MAAMM,EAAkBD,EACxB,IAAKE,EAAUC,GAAeF,EAC9B,MAAMG,EAAgBhN,KAAKjL,QAAQoX,WAAWW,GAC1CC,EAAYlc,QACdic,EAAW,GAAGA,KAAYC,EAAYlc,SAExC,IAAIoc,EAAuBjN,KAAKjL,QAAQoX,WAAWW,GAC/CnD,GAASsD,KACXA,EAAuB,CACrB5b,IAAK4b,IAGT,MAAMC,EAAclN,KAAKmN,gBAAgBN,GACzC,IAAKK,GAAgB1D,GAAYyD,IAAyBzD,GAAYwD,GAAiB,SACvFR,QAAQY,IAAIF,GACZ,MAAMtB,EAAW/B,GAAcqD,EAAa,IACvClN,KAAKjL,QAAQ4X,yBACbM,EACH,MAAAtc,CAAOM,GACL,IAAI6I,EAA4CiT,EAAYlc,MACxDmc,IAAkBrD,GAASqD,IAAkBA,EAAcrc,SAC7DmJ,EAASkT,EAAcrc,OAAOM,EAAQ8b,EAAYlc,QAEpD,IAAIwc,EAA0D,KAI9D,OAHIJ,IACFI,EAAuBJ,EAAqBtc,OAASsc,EAAqBtc,OAAOM,EAAQ8b,EAAYlc,OAASoc,EAAqBnD,SAAWmD,EAAqB5b,KAE9Jgc,GAAwBvT,CAChC,EACDkQ,SAAUhK,KAAK8L,MAAMwB,YAEnB1B,GACF5L,KAAKiM,YAAY7F,KAAK,CAAC0G,EAAUlB,KAKvC,eAAAuB,EAAiBvc,EAAGK,IAClB,MAAwC,WAAjCA,EAAOsc,QAAQxW,cAA6B9F,EAASA,EAAOuc,uBAAwBC,cAAc,oBAG3G,cAAAC,GACE,MAAMC,EAAO3N,KAAKiM,YAClB,GAAoB,IAAhB0B,EAAK3G,OACT,IAAK,MAAM,CAAG4G,KAASD,EACrBC,EAAKlC,UAIT,WAAAmC,GACE,MAAMF,EAAO3N,KAAKiM,YAClB,GAAoB,IAAhB0B,EAAK3G,OACT,IAAK,MAAM,CAAE4G,KAASD,EACpBC,EAAK1C","x_google_ignoreList":[2,3,4,5]}